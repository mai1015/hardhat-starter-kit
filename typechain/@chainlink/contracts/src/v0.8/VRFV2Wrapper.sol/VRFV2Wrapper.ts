/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface VRFV2WrapperInterface extends utils.Interface {
  functions: {
    "COORDINATOR()": FunctionFragment;
    "LINK()": FunctionFragment;
    "LINK_ETH_FEED()": FunctionFragment;
    "SUBSCRIPTION_ID()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "calculateRequestPrice(uint32)": FunctionFragment;
    "disable()": FunctionFragment;
    "enable()": FunctionFragment;
    "estimateRequestPrice(uint32,uint256)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "lastRequestId()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "s_callbacks(uint256)": FunctionFragment;
    "s_configured()": FunctionFragment;
    "s_disabled()": FunctionFragment;
    "setConfig(uint32,uint32,uint8,bytes32,uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "typeAndVersion()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COORDINATOR"
      | "LINK"
      | "LINK_ETH_FEED"
      | "SUBSCRIPTION_ID"
      | "acceptOwnership"
      | "calculateRequestPrice"
      | "disable"
      | "enable"
      | "estimateRequestPrice"
      | "getConfig"
      | "lastRequestId"
      | "onTokenTransfer"
      | "owner"
      | "rawFulfillRandomWords"
      | "s_callbacks"
      | "s_configured"
      | "s_disabled"
      | "setConfig"
      | "transferOwnership"
      | "typeAndVersion"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COORDINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LINK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LINK_ETH_FEED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBSCRIPTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequestPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(functionFragment: "enable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateRequestPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "s_callbacks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_configured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_disabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "COORDINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LINK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LINK_ETH_FEED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBSCRIPTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateRequestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_callbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_configured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_disabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WrapperFulfillmentFailed(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperFulfillmentFailed"): EventFragment;
}

export interface OwnershipTransferRequestedEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string],
  OwnershipTransferRequestedEventObject
>;

export type OwnershipTransferRequestedEventFilter =
  TypedEventFilter<OwnershipTransferRequestedEvent>;

export interface OwnershipTransferredEventObject {
  from: string;
  to: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WrapperFulfillmentFailedEventObject {
  requestId: BigNumber;
  consumer: string;
}
export type WrapperFulfillmentFailedEvent = TypedEvent<
  [BigNumber, string],
  WrapperFulfillmentFailedEventObject
>;

export type WrapperFulfillmentFailedEventFilter =
  TypedEventFilter<WrapperFulfillmentFailedEvent>;

export interface VRFV2Wrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VRFV2WrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COORDINATOR(overrides?: CallOverrides): Promise<[string]>;

    LINK(overrides?: CallOverrides): Promise<[string]>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<[string]>;

    SUBSCRIPTION_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestGasPriceWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, string, number] & {
        fallbackWeiPerUnitLink: BigNumber;
        stalenessSeconds: number;
        fulfillmentFlatFeeLinkPPM: number;
        wrapperGasOverhead: number;
        coordinatorGasOverhead: number;
        wrapperPremiumPercentage: number;
        keyHash: string;
        maxNumWords: number;
      }
    >;

    lastRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_callbacks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        callbackAddress: string;
        callbackGasLimit: number;
        requestGasPrice: BigNumber;
        requestWeiPerUnitLink: BigNumber;
        juelsPaid: BigNumber;
      }
    >;

    s_configured(overrides?: CallOverrides): Promise<[boolean]>;

    s_disabled(overrides?: CallOverrides): Promise<[boolean]>;

    setConfig(
      _wrapperGasOverhead: PromiseOrValue<BigNumberish>,
      _coordinatorGasOverhead: PromiseOrValue<BigNumberish>,
      _wrapperPremiumPercentage: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _maxNumWords: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  COORDINATOR(overrides?: CallOverrides): Promise<string>;

  LINK(overrides?: CallOverrides): Promise<string>;

  LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;

  SUBSCRIPTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateRequestPrice(
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateRequestPrice(
    _callbackGasLimit: PromiseOrValue<BigNumberish>,
    _requestGasPriceWei: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, string, number] & {
      fallbackWeiPerUnitLink: BigNumber;
      stalenessSeconds: number;
      fulfillmentFlatFeeLinkPPM: number;
      wrapperGasOverhead: number;
      coordinatorGasOverhead: number;
      wrapperPremiumPercentage: number;
      keyHash: string;
      maxNumWords: number;
    }
  >;

  lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  onTokenTransfer(
    _sender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_callbacks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber] & {
      callbackAddress: string;
      callbackGasLimit: number;
      requestGasPrice: BigNumber;
      requestWeiPerUnitLink: BigNumber;
      juelsPaid: BigNumber;
    }
  >;

  s_configured(overrides?: CallOverrides): Promise<boolean>;

  s_disabled(overrides?: CallOverrides): Promise<boolean>;

  setConfig(
    _wrapperGasOverhead: PromiseOrValue<BigNumberish>,
    _coordinatorGasOverhead: PromiseOrValue<BigNumberish>,
    _wrapperPremiumPercentage: PromiseOrValue<BigNumberish>,
    _keyHash: PromiseOrValue<BytesLike>,
    _maxNumWords: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  typeAndVersion(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COORDINATOR(overrides?: CallOverrides): Promise<string>;

    LINK(overrides?: CallOverrides): Promise<string>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<string>;

    SUBSCRIPTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    calculateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disable(overrides?: CallOverrides): Promise<void>;

    enable(overrides?: CallOverrides): Promise<void>;

    estimateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestGasPriceWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, string, number] & {
        fallbackWeiPerUnitLink: BigNumber;
        stalenessSeconds: number;
        fulfillmentFlatFeeLinkPPM: number;
        wrapperGasOverhead: number;
        coordinatorGasOverhead: number;
        wrapperPremiumPercentage: number;
        keyHash: string;
        maxNumWords: number;
      }
    >;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    s_callbacks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        callbackAddress: string;
        callbackGasLimit: number;
        requestGasPrice: BigNumber;
        requestWeiPerUnitLink: BigNumber;
        juelsPaid: BigNumber;
      }
    >;

    s_configured(overrides?: CallOverrides): Promise<boolean>;

    s_disabled(overrides?: CallOverrides): Promise<boolean>;

    setConfig(
      _wrapperGasOverhead: PromiseOrValue<BigNumberish>,
      _coordinatorGasOverhead: PromiseOrValue<BigNumberish>,
      _wrapperPremiumPercentage: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _maxNumWords: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    typeAndVersion(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferRequested(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;
    OwnershipTransferRequested(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WrapperFulfillmentFailed(uint256,address)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      consumer?: PromiseOrValue<string> | null
    ): WrapperFulfillmentFailedEventFilter;
    WrapperFulfillmentFailed(
      requestId?: PromiseOrValue<BigNumberish> | null,
      consumer?: PromiseOrValue<string> | null
    ): WrapperFulfillmentFailedEventFilter;
  };

  estimateGas: {
    COORDINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LINK(overrides?: CallOverrides): Promise<BigNumber>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<BigNumber>;

    SUBSCRIPTION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestGasPriceWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_callbacks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_configured(overrides?: CallOverrides): Promise<BigNumber>;

    s_disabled(overrides?: CallOverrides): Promise<BigNumber>;

    setConfig(
      _wrapperGasOverhead: PromiseOrValue<BigNumberish>,
      _coordinatorGasOverhead: PromiseOrValue<BigNumberish>,
      _wrapperPremiumPercentage: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _maxNumWords: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    typeAndVersion(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COORDINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK_ETH_FEED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUBSCRIPTION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateRequestPrice(
      _callbackGasLimit: PromiseOrValue<BigNumberish>,
      _requestGasPriceWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      _sender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_callbacks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_configured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_disabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConfig(
      _wrapperGasOverhead: PromiseOrValue<BigNumberish>,
      _coordinatorGasOverhead: PromiseOrValue<BigNumberish>,
      _wrapperPremiumPercentage: PromiseOrValue<BigNumberish>,
      _keyHash: PromiseOrValue<BytesLike>,
      _maxNumWords: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    typeAndVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
