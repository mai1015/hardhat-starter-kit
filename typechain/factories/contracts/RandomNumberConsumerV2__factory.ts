/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RandomNumberConsumerV2,
  RandomNumberConsumerV2Interface,
} from "../../contracts/RandomNumberConsumerV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "ReturnedRandomness",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b5060405162000b2f38038062000b2f8339818101604052810190620000389190620001fa565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060e0818152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508267ffffffffffffffff1660c08167ffffffffffffffff168152505050505062000256565b600080fd5b600067ffffffffffffffff82169050919050565b620001348162000115565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000187826200015a565b9050919050565b62000199816200017a565b8114620001a557600080fd5b50565b600081519050620001b9816200018e565b92915050565b6000819050919050565b620001d481620001bf565b8114620001e057600080fd5b50565b600081519050620001f481620001c9565b92915050565b60008060006060848603121562000216576200021562000110565b5b6000620002268682870162000143565b93505060206200023986828701620001a8565b92505060406200024c86828701620001e3565b9150509250925092565b60805160a05160c05160e05161089962000296600039600061021d0152600061023e015260006101e101526000818160c7015261011b01526108996000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c862891461006d578063e89e106a14610077578063f6eaffc814610095575b600080fd5b61006b60048036038101906100669190610559565b6100c5565b005b610075610185565b005b61007f6102d0565b60405161008c91906105c4565b60405180910390f35b6100af60048036038101906100aa91906105df565b6102d6565b6040516100bc91906105c4565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161016e92919061064d565b60405180910390fd5b61018182826102fa565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b81526004016102859594939291906106ee565b6020604051808303816000875af11580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610756565b600181905550565b60015481565b600081815481106102e657600080fd5b906000526020600020016000915090505481565b806000908051906020019061031092919061034c565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e816040516103409190610841565b60405180910390a15050565b828054828255906000526020600020908101928215610388579160200282015b8281111561038757825182559160200191906001019061036c565b5b5090506103959190610399565b5090565b5b808211156103b257600081600090555060010161039a565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6103dd816103ca565b81146103e857600080fd5b50565b6000813590506103fa816103d4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61044e82610405565b810181811067ffffffffffffffff8211171561046d5761046c610416565b5b80604052505050565b60006104806103b6565b905061048c8282610445565b919050565b600067ffffffffffffffff8211156104ac576104ab610416565b5b602082029050602081019050919050565b600080fd5b60006104d56104d084610491565b610476565b905080838252602082019050602084028301858111156104f8576104f76104bd565b5b835b81811015610521578061050d88826103eb565b8452602084019350506020810190506104fa565b5050509392505050565b600082601f8301126105405761053f610400565b5b81356105508482602086016104c2565b91505092915050565b600080604083850312156105705761056f6103c0565b5b600061057e858286016103eb565b925050602083013567ffffffffffffffff81111561059f5761059e6103c5565b5b6105ab8582860161052b565b9150509250929050565b6105be816103ca565b82525050565b60006020820190506105d960008301846105b5565b92915050565b6000602082840312156105f5576105f46103c0565b5b6000610603848285016103eb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106378261060c565b9050919050565b6106478161062c565b82525050565b6000604082019050610662600083018561063e565b61066f602083018461063e565b9392505050565b6000819050919050565b61068981610676565b82525050565b600067ffffffffffffffff82169050919050565b6106ac8161068f565b82525050565b600061ffff82169050919050565b6106c9816106b2565b82525050565b600063ffffffff82169050919050565b6106e8816106cf565b82525050565b600060a0820190506107036000830188610680565b61071060208301876106a3565b61071d60408301866106c0565b61072a60608301856106df565b61073760808301846106df565b9695505050505050565b600081519050610750816103d4565b92915050565b60006020828403121561076c5761076b6103c0565b5b600061077a84828501610741565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107b8816103ca565b82525050565b60006107ca83836107af565b60208301905092915050565b6000602082019050919050565b60006107ee82610783565b6107f8818561078e565b93506108038361079f565b8060005b8381101561083457815161081b88826107be565b9750610826836107d6565b925050600181019050610807565b5085935050505092915050565b6000602082019050818103600083015261085b81846107e3565b90509291505056fea26469706673582212208bb4a133d82ff284e7d86c72044c6b5a1ec86398d4659e7c6ddc7b84d60056cb64736f6c63430008110033";

type RandomNumberConsumerV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberConsumerV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberConsumerV2__factory extends ContractFactory {
  constructor(...args: RandomNumberConsumerV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    subscriptionId: PromiseOrValue<BigNumberish>,
    vrfCoordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RandomNumberConsumerV2> {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      keyHash,
      overrides || {}
    ) as Promise<RandomNumberConsumerV2>;
  }
  override getDeployTransaction(
    subscriptionId: PromiseOrValue<BigNumberish>,
    vrfCoordinator: PromiseOrValue<string>,
    keyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      keyHash,
      overrides || {}
    );
  }
  override attach(address: string): RandomNumberConsumerV2 {
    return super.attach(address) as RandomNumberConsumerV2;
  }
  override connect(signer: Signer): RandomNumberConsumerV2__factory {
    return super.connect(signer) as RandomNumberConsumerV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberConsumerV2Interface {
    return new utils.Interface(_abi) as RandomNumberConsumerV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RandomNumberConsumerV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RandomNumberConsumerV2;
  }
}
